Project 
========
Title		:	Employee Management System 

Client		:	Codetru, PragmaEdge and etc. 

Environments 	:	ReactJS, Java, Spring Boot, MySQL DB.

Tools		:	Maven and Postman.

IDE's		:	STS and VSC editor.

Duration	:	1 month.

Team Size	:	4 members. 

=============================================================
		Employee Management System 
=============================================================

Project structure :

   backend
	|
	|--src/main/java
		|
		|---com.ihub.www 
			|
			|---BackendApplication.java
		|
		|---com.ihub.www.Model
			|
			|---Employee.java
		|
		|---com.ihub.www.repo
			|
			|---EmployeeRepository.java
		|
		|---com.ihub.www.controller
			|
			|---EmployeeController.java
		|
		|---com.ihub.www.service
			|
			|---EmployeeService.java
		|
		|---com.ihub.www.exception
			|
			|---ResourceNotFoundException.java 
	|
	|--src/main/resources
			|
			|---application.properties 


step1:
-----
	Create a spring boot starter project i.e backend.
	ex:
		starters:
				spring web 
				spring data jpa
				lombok
				mysql driver

step2:
-----
	Create a "employee_management_system" schema in mysql database.
	ex:
		MYSQL> create schema employee_management_system;

step3:
------
	Switch to  employee_management_system schema.
	ex:
		MYSQL> use employee_management_system

step4:
------
	Create a employees table inside mysql database and insert few records.
	ex:
		create table employees(id int(3) AUTO_INCREMENT ,first_name varchar(10),last_name varchar(10),email varchar(15),primary key(id));

	insert into employees(id,first_name,last_name,email) values(1,'Vishnu','Adithyan','vishnu@gmail.com');

		insert into employees(id,first_name,last_name,email) values(2,'Saran','Sam','sam@zoho.com');

		select * from employees;

		commit;

step5:
-----
	Configure server port and mysql driver in application.properties file.
	ex:
	application.properties	
	----------------------	
	server.port=9090

	spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
	spring.datasource.url=jdbc:mysql://localhost:3306/employee_management_system
	spring.datasource.username=root
	spring.datasource.password=root

	
	spring.jpa.hibernate.ddl-auto=update
	spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect


step6:
-----
	Create a "Employee" model class inside "com.ihub.www.model" package.
	ex:
	Employee.java
	------------
	package com.ihub.www.model;

	import jakarta.annotation.Generated;
	import jakarta.persistence.Column;
	import jakarta.persistence.Entity;
	import jakarta.persistence.GeneratedValue;
	import jakarta.persistence.GenerationType;
	import jakarta.persistence.Id;
	import jakarta.persistence.Table;
	import lombok.AllArgsConstructor;
	import lombok.Data;
	import lombok.NoArgsConstructor;

	@Entity
	@Table(name="employees")
	@Data
	@NoArgsConstructor
	@AllArgsConstructor
	public class Employee 
	{
		@Id
		@GeneratedValue(strategy = GenerationType.IDENTITY)
		private long id;
	
		@Column
		private String firstName;
		@Column
		private String lastName;
		@Column
		private String email;	
	}
	
step7:
------
	Create a EmployeeRepository inside "com.ihub.www.repo" package. 
	ex:
	EmployeeRepository.java
	------------------------
	package com.ihub.www.repo;

	import org.springframework.data.jpa.repository.JpaRepository;
	import org.springframework.stereotype.Repository;
	import com.ihub.www.model.Employee;

	@Repository
	public interface EmployeeRepository extends JpaRepository<Employee, Long>
	{

	}

step8:
--------
	Create a ResourceNotFoundException inside "com.ihub.www.exception" package.
	ex:
	ResourceNotFoundException.java
	-----------------------------
	package com.ihub.www.exception;

	import org.springframework.http.HttpStatus;
	import org.springframework.web.bind.annotation.ResponseStatus;

	@ResponseStatus(value =HttpStatus.NOT_FOUND)
	public class ResourceNotFoundException extends RuntimeException
	{

		private static final long serialVersionUID = 1L;
	
		public ResourceNotFoundException(String message)
		{
			super(message);
		}
	}

step9:
------
	Create a EmployeeService inside "com.ihub.www.service" package.
	ex:
	EmployeeService.java
	--------------------
	package com.ihub.www.service;

	import java.util.List;

	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.stereotype.Service;

	import com.ihub.www.model.Employee;
	import com.ihub.www.repo.EmployeeRepository;

	@Service
	public class EmployeeService 
	{
		@Autowired
		EmployeeRepository employeeRepository;
	
		public List<Employee> getAllEmployees()
		{
			return employeeRepository.findAll();
		}
	}
	
step10:
------
	Create a EmployeeController inside "com.ihub.www.controller" package.
	ex:
	EmployeeController.java
	----------------------
	package com.ihub.www.controller;

	import java.util.List;

	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.web.bind.annotation.GetMapping;
	import org.springframework.web.bind.annotation.RequestMapping;
	import org.springframework.web.bind.annotation.RestController;

	import com.ihub.www.model.Employee;
	import com.ihub.www.service.EmployeeService;

	@RestController
	@RequestMapping("/api/v1/")
	public class EmployeeController 
	{
		@Autowired
		EmployeeService employeeService;
	
		@GetMapping("/employees")
		public List<Employee> getAllEmployees()
		{
			return employeeService.getAllEmployees();
		}
	}

step11:
------
	Run the spring boot starter project.
	ex:
		right click to springboot-backend project --> 
		run as --> spring boot App

step12:
-------
	Test the application by using below request url
	in postman tool.
	ex:
	Method :	Request 

	GET		http://localhost:9090/api/v1/employees 